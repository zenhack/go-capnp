{{with .Annotations.Doc -}}
// {{.}}
{{end -}}
type {{.Node.Name}}{{ template "_declareTypeParams" . }} struct { Client *{{.G.Capnp}}.Client }

{{ template "_typeid" .Node }}

{{range .Methods -}}
func (c {{ template "_nodeReceiver" $.Node }}) {{.Name|title}}(ctx {{$.G.Imports.Context}}.Context, params func({{$.G.RemoteNodeName .Params $.Node}}) error) ({{$.G.RemoteNodeName .Results $.Node}}_Future, {{$.G.Capnp}}.ReleaseFunc) {
	s := {{$.G.Capnp}}.Send{
		Method: {{$.G.Capnp}}.Method{
			{{template "_interfaceMethod" .}}
		},
	}
	if params != nil {
		s.ArgsSize = {{$.G.ObjectSize .Params}}
		s.PlaceArgs = func(s {{$.G.Capnp}}.Struct) error { return params({{$.G.RemoteNodeName .Params $.Node}}{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return {{$.G.RemoteNodeName .Results $.Node}}_Future{Future: ans.Future()}, release
}
{{end}}

func (c {{ template "_nodeReceiver" $.Node }}) AddRef() {{ template "_nodeReceiver" $.Node }} {
	return {{ template "_nodeReceiver" $.Node }}{
		Client: c.Client.AddRef(),
	}
}

func (c {{ template "_nodeReceiver" $.Node }}) Release() {
	c.Client.Release()
}

func (c {{ template "_nodeReceiver" $.Node }}) EncodeAsPtr(s *{{.G.Capnp}}.Segment) {{.G.Capnp}}.Ptr {
	return c.Client.EncodeAsPtr(s)
}

func (c *{{ template "_nodeReceiver" $.Node }}) DecodeFromPtr(p {{.G.Capnp}}.Ptr) {
	{{.G.Capnp}}.DecodeClientFromPtr(&c.Client, p)
}
